//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""ce5cc7aa-341f-4ae7-a1a3-9c4294871cd9"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouchInput"",
                    ""type"": ""Value"",
                    ""id"": ""e6d117b5-1dfa-426c-a720-7f4c8bb7809c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""8caf3eaf-93b5-4ef5-b118-26bab251107b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3e3f06bf-90f3-48db-905a-b0844982420d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""16278d5d-db22-4c1e-993e-58123bda4988"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d118ecb6-ddc9-48f4-9bc1-3dbe3cde2c88"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""387a237d-7613-49bd-a2d1-f7d859316657"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72dea9ee-d021-4324-ad6c-fcc424d5db18"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5106100c-e618-47c8-8b88-9f6cea2c4fb6"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d139747-cd52-41a3-89b5-d2db77fa27dc"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30123dc8-c49a-4bc6-89e2-d83160d9488e"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_PrimaryTouchInput = m_Touch.FindAction("PrimaryTouchInput", throwIfNotFound: true);
        m_Touch_PrimaryTouchPress = m_Touch.FindAction("PrimaryTouchPress", throwIfNotFound: true);
        m_Touch_PrimaryTouchPosition = m_Touch.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
        m_Touch_SecondaryTouchPress = m_Touch.FindAction("SecondaryTouchPress", throwIfNotFound: true);
        m_Touch_SecondaryTouchPosition = m_Touch.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_PrimaryTouchInput;
    private readonly InputAction m_Touch_PrimaryTouchPress;
    private readonly InputAction m_Touch_PrimaryTouchPosition;
    private readonly InputAction m_Touch_SecondaryTouchPress;
    private readonly InputAction m_Touch_SecondaryTouchPosition;
    public struct TouchActions
    {
        private @TouchControls m_Wrapper;
        public TouchActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouchInput => m_Wrapper.m_Touch_PrimaryTouchInput;
        public InputAction @PrimaryTouchPress => m_Wrapper.m_Touch_PrimaryTouchPress;
        public InputAction @PrimaryTouchPosition => m_Wrapper.m_Touch_PrimaryTouchPosition;
        public InputAction @SecondaryTouchPress => m_Wrapper.m_Touch_SecondaryTouchPress;
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_Touch_SecondaryTouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @PrimaryTouchInput.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchInput;
                @PrimaryTouchInput.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchInput;
                @PrimaryTouchInput.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchInput;
                @PrimaryTouchPress.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPress;
                @PrimaryTouchPress.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPress;
                @PrimaryTouchPress.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPress;
                @PrimaryTouchPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPosition;
                @SecondaryTouchPress.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPress;
                @SecondaryTouchPress.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPress;
                @SecondaryTouchPress.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPress;
                @SecondaryTouchPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPosition;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryTouchInput.started += instance.OnPrimaryTouchInput;
                @PrimaryTouchInput.performed += instance.OnPrimaryTouchInput;
                @PrimaryTouchInput.canceled += instance.OnPrimaryTouchInput;
                @PrimaryTouchPress.started += instance.OnPrimaryTouchPress;
                @PrimaryTouchPress.performed += instance.OnPrimaryTouchPress;
                @PrimaryTouchPress.canceled += instance.OnPrimaryTouchPress;
                @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
                @SecondaryTouchPress.started += instance.OnSecondaryTouchPress;
                @SecondaryTouchPress.performed += instance.OnSecondaryTouchPress;
                @SecondaryTouchPress.canceled += instance.OnSecondaryTouchPress;
                @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnPrimaryTouchInput(InputAction.CallbackContext context);
        void OnPrimaryTouchPress(InputAction.CallbackContext context);
        void OnPrimaryTouchPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchPress(InputAction.CallbackContext context);
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
    }
}
